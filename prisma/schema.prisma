// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())

  // Relations
  sessions    Session[]
  connections ConnectionMember[]
  accounts    Account[]
  chats       Chat[]
  inviteCodes InviteCode[]       @relation("UserInviterCodes")
  usedCodes   InviteCode[]       @relation("UserUsedCodes")
  Message     Message[]
}

model Connection {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  type      ConnectionType

  members    ConnectionMember[]
  chats      Chat[]
  InviteCode InviteCode[]
}

enum ConnectionType {
  couple
  friends
  team
  other
}

model ConnectionMember {
  id           String   @id @default(cuid())
  userId       String
  connectionId String
  joinedAt     DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  connection Connection @relation(fields: [connectionId], references: [id])

  @@unique([userId, connectionId])
}

model Chat {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String   @default("New Conversation")
  isArchived    Boolean  @default(false)
  context       Json? // Store raw onboarding data
  contextPrompt String? // Store generated prompt

  // Relations
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  messages     Message[]
  Connection   Connection? @relation(fields: [connectionId], references: [id])
  connectionId String?
}

model Message {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  content   String
  role      MessageRole // 'user' or 'ai' or 'system'

  // Relations
  chatId String
  chat   Chat    @relation(fields: [chatId], references: [id])
  userId String? // Null for AI messages
  user   User?   @relation(fields: [userId], references: [id])
}

enum MessageRole {
  user
  ai
  system
}

// Optional: NextAuth compatible session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InviteCode {
  id           String      @id @default(cuid())
  code         String      @unique
  inviterId    String
  inviter      User        @relation("UserInviterCodes", fields: [inviterId], references: [id])
  connectionId String? // Add this to link to a connection
  connection   Connection? @relation(fields: [connectionId], references: [id])
  createdAt    DateTime    @default(now())
  expiresAt    DateTime?

  used     Boolean @default(false)
  usedById String?
  usedBy   User?   @relation("UserUsedCodes", fields: [usedById], references: [id])
}
