{
  "v": "5.12.1",
  "fr": 25,
  "ip": 0,
  "op": 81,
  "w": 512,
  "h": 512,
  "nm": "Comp 3",
  "assets": [],
  "layers": [
    {
      "ind": 1,
      "ty": 3,
      "nm": "NULL",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 0, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [256, 256, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [50, 50, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "ip": 0,
      "op": 120,
      "st": 0
    },
    {
      "ind": 2,
      "ty": 4,
      "nm": "Layer 2",
      "parent": 1,
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [50, 50, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "ef": [
        {
          "ty": 5,
          "nm": "Kleaner",
          "np": 34,
          "ix": 1,
          "en": 1,
          "ef": [
            {
              "ty": 7,
              "nm": "Anticipation",
              "ix": 1,
              "v": { "a": 0, "k": 0, "ix": 1 }
            },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 2,
              "v": { "a": 0, "k": 0, "ix": 2 }
            },
            {
              "ty": 7,
              "nm": "Follow Through",
              "ix": 3,
              "v": { "a": 0, "k": 1, "ix": 3 }
            },
            { "ty": 6, "nm": "Anticipation", "ix": 4, "v": 0 },
            {
              "ty": 0,
              "nm": "Duration (s)",
              "ix": 5,
              "v": { "a": 0, "k": 0.3, "ix": 5 }
            },
            {
              "ty": 0,
              "nm": "Amplitude",
              "ix": 6,
              "v": { "a": 0, "k": 50, "ix": 6 }
            },
            { "ty": 6, "nm": "", "ix": 7, "v": 0 },
            { "ty": 6, "nm": "Interpolation", "ix": 8, "v": 0 },
            {
              "ty": 0,
              "nm": "Slow In",
              "ix": 9,
              "v": { "a": 0, "k": 60, "ix": 9 }
            },
            {
              "ty": 0,
              "nm": "Slow Out",
              "ix": 10,
              "v": { "a": 0, "k": 25, "ix": 10 }
            },
            { "ty": 6, "nm": "", "ix": 11, "v": 0 },
            { "ty": 6, "nm": "Follow Through", "ix": 12, "v": 0 },
            {
              "ty": 0,
              "nm": "Elasticity",
              "ix": 13,
              "v": { "a": 0, "k": 10, "ix": 13 }
            },
            {
              "ty": 0,
              "nm": "Elasticity random",
              "ix": 14,
              "v": { "a": 0, "k": 0, "ix": 14 }
            },
            {
              "ty": 0,
              "nm": "Damping",
              "ix": 15,
              "v": { "a": 0, "k": 50, "ix": 15 }
            },
            {
              "ty": 0,
              "nm": "Damping random",
              "ix": 16,
              "v": { "a": 0, "k": 0, "ix": 16 }
            },
            {
              "ty": 7,
              "nm": "Bounce",
              "ix": 17,
              "v": { "a": 0, "k": 0, "ix": 17 }
            },
            { "ty": 6, "nm": "", "ix": 18, "v": 0 },
            { "ty": 6, "nm": "Spatial Options", "ix": 19, "v": 0 },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 20,
              "v": { "a": 0, "k": 0, "ix": 20 }
            },
            {
              "ty": 7,
              "nm": "Mode",
              "ix": 21,
              "v": { "a": 0, "k": 1, "ix": 21 }
            },
            { "ty": 6, "nm": "Overlap (simulation)", "ix": 22, "v": 0 },
            {
              "ty": 7,
              "nm": "Overlap",
              "ix": 23,
              "v": { "a": 0, "k": 1, "ix": 23 }
            },
            {
              "ty": 0,
              "nm": "Delay (s)",
              "ix": 24,
              "v": { "a": 0, "k": 0.05, "ix": 24 }
            },
            {
              "ty": 0,
              "nm": "Overlap random",
              "ix": 25,
              "v": { "a": 0, "k": 0, "ix": 25 }
            },
            { "ty": 6, "nm": "", "ix": 26, "v": 0 },
            { "ty": 6, "nm": "Soft Body (simulation)", "ix": 27, "v": 0 },
            {
              "ty": 7,
              "nm": "Soft Body",
              "ix": 28,
              "v": { "a": 0, "k": 1, "ix": 28 }
            },
            {
              "ty": 0,
              "nm": "Soft-Body Flexibility",
              "ix": 29,
              "v": { "a": 0, "k": 100, "ix": 29 }
            },
            { "ty": 6, "nm": "", "ix": 30, "v": 0 },
            { "ty": 6, "nm": "", "ix": 31, "v": 0 },
            {
              "ty": 0,
              "nm": "Precision",
              "ix": 32,
              "v": { "a": 0, "k": 1, "ix": 32 }
            }
          ]
        },
        {
          "ty": 5,
          "nm": "Kleaner 2",
          "np": 34,
          "ix": 2,
          "en": 1,
          "ef": [
            {
              "ty": 7,
              "nm": "Anticipation",
              "ix": 1,
              "v": { "a": 0, "k": 0, "ix": 1 }
            },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 2,
              "v": { "a": 0, "k": 0, "ix": 2 }
            },
            {
              "ty": 7,
              "nm": "Follow Through",
              "ix": 3,
              "v": { "a": 0, "k": 1, "ix": 3 }
            },
            { "ty": 6, "nm": "Anticipation", "ix": 4, "v": 0 },
            {
              "ty": 0,
              "nm": "Duration (s)",
              "ix": 5,
              "v": { "a": 0, "k": 0.3, "ix": 5 }
            },
            {
              "ty": 0,
              "nm": "Amplitude",
              "ix": 6,
              "v": { "a": 0, "k": 50, "ix": 6 }
            },
            { "ty": 6, "nm": "", "ix": 7, "v": 0 },
            { "ty": 6, "nm": "Interpolation", "ix": 8, "v": 0 },
            {
              "ty": 0,
              "nm": "Slow In",
              "ix": 9,
              "v": { "a": 0, "k": 60, "ix": 9 }
            },
            {
              "ty": 0,
              "nm": "Slow Out",
              "ix": 10,
              "v": { "a": 0, "k": 25, "ix": 10 }
            },
            { "ty": 6, "nm": "", "ix": 11, "v": 0 },
            { "ty": 6, "nm": "Follow Through", "ix": 12, "v": 0 },
            {
              "ty": 0,
              "nm": "Elasticity",
              "ix": 13,
              "v": { "a": 0, "k": 10, "ix": 13 }
            },
            {
              "ty": 0,
              "nm": "Elasticity random",
              "ix": 14,
              "v": { "a": 0, "k": 0, "ix": 14 }
            },
            {
              "ty": 0,
              "nm": "Damping",
              "ix": 15,
              "v": { "a": 0, "k": 50, "ix": 15 }
            },
            {
              "ty": 0,
              "nm": "Damping random",
              "ix": 16,
              "v": { "a": 0, "k": 0, "ix": 16 }
            },
            {
              "ty": 7,
              "nm": "Bounce",
              "ix": 17,
              "v": { "a": 0, "k": 0, "ix": 17 }
            },
            { "ty": 6, "nm": "", "ix": 18, "v": 0 },
            { "ty": 6, "nm": "Spatial Options", "ix": 19, "v": 0 },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 20,
              "v": { "a": 0, "k": 0, "ix": 20 }
            },
            {
              "ty": 7,
              "nm": "Mode",
              "ix": 21,
              "v": { "a": 0, "k": 1, "ix": 21 }
            },
            { "ty": 6, "nm": "Overlap (simulation)", "ix": 22, "v": 0 },
            {
              "ty": 7,
              "nm": "Overlap",
              "ix": 23,
              "v": { "a": 0, "k": 1, "ix": 23 }
            },
            {
              "ty": 0,
              "nm": "Delay (s)",
              "ix": 24,
              "v": { "a": 0, "k": 0.05, "ix": 24 }
            },
            {
              "ty": 0,
              "nm": "Overlap random",
              "ix": 25,
              "v": { "a": 0, "k": 0, "ix": 25 }
            },
            { "ty": 6, "nm": "", "ix": 26, "v": 0 },
            { "ty": 6, "nm": "Soft Body (simulation)", "ix": 27, "v": 0 },
            {
              "ty": 7,
              "nm": "Soft Body",
              "ix": 28,
              "v": { "a": 0, "k": 1, "ix": 28 }
            },
            {
              "ty": 0,
              "nm": "Soft-Body Flexibility",
              "ix": 29,
              "v": { "a": 0, "k": 100, "ix": 29 }
            },
            { "ty": 6, "nm": "", "ix": 30, "v": 0 },
            { "ty": 6, "nm": "", "ix": 31, "v": 0 },
            {
              "ty": 0,
              "nm": "Precision",
              "ix": 32,
              "v": { "a": 0, "k": 1, "ix": 32 }
            }
          ]
        },
        {
          "ty": 5,
          "nm": "Kleaner 3",
          "np": 34,
          "ix": 3,
          "en": 1,
          "ef": [
            {
              "ty": 7,
              "nm": "Anticipation",
              "ix": 1,
              "v": { "a": 0, "k": 0, "ix": 1 }
            },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 2,
              "v": { "a": 0, "k": 0, "ix": 2 }
            },
            {
              "ty": 7,
              "nm": "Follow Through",
              "ix": 3,
              "v": { "a": 0, "k": 1, "ix": 3 }
            },
            { "ty": 6, "nm": "Anticipation", "ix": 4, "v": 0 },
            {
              "ty": 0,
              "nm": "Duration (s)",
              "ix": 5,
              "v": { "a": 0, "k": 0.3, "ix": 5 }
            },
            {
              "ty": 0,
              "nm": "Amplitude",
              "ix": 6,
              "v": { "a": 0, "k": 50, "ix": 6 }
            },
            { "ty": 6, "nm": "", "ix": 7, "v": 0 },
            { "ty": 6, "nm": "Interpolation", "ix": 8, "v": 0 },
            {
              "ty": 0,
              "nm": "Slow In",
              "ix": 9,
              "v": { "a": 0, "k": 60, "ix": 9 }
            },
            {
              "ty": 0,
              "nm": "Slow Out",
              "ix": 10,
              "v": { "a": 0, "k": 25, "ix": 10 }
            },
            { "ty": 6, "nm": "", "ix": 11, "v": 0 },
            { "ty": 6, "nm": "Follow Through", "ix": 12, "v": 0 },
            {
              "ty": 0,
              "nm": "Elasticity",
              "ix": 13,
              "v": { "a": 0, "k": 10, "ix": 13 }
            },
            {
              "ty": 0,
              "nm": "Elasticity random",
              "ix": 14,
              "v": { "a": 0, "k": 0, "ix": 14 }
            },
            {
              "ty": 0,
              "nm": "Damping",
              "ix": 15,
              "v": { "a": 0, "k": 50, "ix": 15 }
            },
            {
              "ty": 0,
              "nm": "Damping random",
              "ix": 16,
              "v": { "a": 0, "k": 0, "ix": 16 }
            },
            {
              "ty": 7,
              "nm": "Bounce",
              "ix": 17,
              "v": { "a": 0, "k": 0, "ix": 17 }
            },
            { "ty": 6, "nm": "", "ix": 18, "v": 0 },
            { "ty": 6, "nm": "Spatial Options", "ix": 19, "v": 0 },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 20,
              "v": { "a": 0, "k": 0, "ix": 20 }
            },
            {
              "ty": 7,
              "nm": "Mode",
              "ix": 21,
              "v": { "a": 0, "k": 1, "ix": 21 }
            },
            { "ty": 6, "nm": "Overlap (simulation)", "ix": 22, "v": 0 },
            {
              "ty": 7,
              "nm": "Overlap",
              "ix": 23,
              "v": { "a": 0, "k": 1, "ix": 23 }
            },
            {
              "ty": 0,
              "nm": "Delay (s)",
              "ix": 24,
              "v": { "a": 0, "k": 0.05, "ix": 24 }
            },
            {
              "ty": 0,
              "nm": "Overlap random",
              "ix": 25,
              "v": { "a": 0, "k": 0, "ix": 25 }
            },
            { "ty": 6, "nm": "", "ix": 26, "v": 0 },
            { "ty": 6, "nm": "Soft Body (simulation)", "ix": 27, "v": 0 },
            {
              "ty": 7,
              "nm": "Soft Body",
              "ix": 28,
              "v": { "a": 0, "k": 1, "ix": 28 }
            },
            {
              "ty": 0,
              "nm": "Soft-Body Flexibility",
              "ix": 29,
              "v": { "a": 0, "k": 100, "ix": 29 }
            },
            { "ty": 6, "nm": "", "ix": 30, "v": 0 },
            { "ty": 6, "nm": "", "ix": 31, "v": 0 },
            {
              "ty": 0,
              "nm": "Precision",
              "ix": 32,
              "v": { "a": 0, "k": 1, "ix": 32 }
            }
          ]
        },
        {
          "ty": 5,
          "nm": "Kleaner 4",
          "np": 34,
          "ix": 4,
          "en": 1,
          "ef": [
            {
              "ty": 7,
              "nm": "Anticipation",
              "ix": 1,
              "v": { "a": 0, "k": 0, "ix": 1 }
            },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 2,
              "v": { "a": 0, "k": 0, "ix": 2 }
            },
            {
              "ty": 7,
              "nm": "Follow Through",
              "ix": 3,
              "v": { "a": 0, "k": 1, "ix": 3 }
            },
            { "ty": 6, "nm": "Anticipation", "ix": 4, "v": 0 },
            {
              "ty": 0,
              "nm": "Duration (s)",
              "ix": 5,
              "v": { "a": 0, "k": 0.3, "ix": 5 }
            },
            {
              "ty": 0,
              "nm": "Amplitude",
              "ix": 6,
              "v": { "a": 0, "k": 50, "ix": 6 }
            },
            { "ty": 6, "nm": "", "ix": 7, "v": 0 },
            { "ty": 6, "nm": "Interpolation", "ix": 8, "v": 0 },
            {
              "ty": 0,
              "nm": "Slow In",
              "ix": 9,
              "v": { "a": 0, "k": 60, "ix": 9 }
            },
            {
              "ty": 0,
              "nm": "Slow Out",
              "ix": 10,
              "v": { "a": 0, "k": 25, "ix": 10 }
            },
            { "ty": 6, "nm": "", "ix": 11, "v": 0 },
            { "ty": 6, "nm": "Follow Through", "ix": 12, "v": 0 },
            {
              "ty": 0,
              "nm": "Elasticity",
              "ix": 13,
              "v": { "a": 0, "k": 10, "ix": 13 }
            },
            {
              "ty": 0,
              "nm": "Elasticity random",
              "ix": 14,
              "v": { "a": 0, "k": 0, "ix": 14 }
            },
            {
              "ty": 0,
              "nm": "Damping",
              "ix": 15,
              "v": { "a": 0, "k": 50, "ix": 15 }
            },
            {
              "ty": 0,
              "nm": "Damping random",
              "ix": 16,
              "v": { "a": 0, "k": 0, "ix": 16 }
            },
            {
              "ty": 7,
              "nm": "Bounce",
              "ix": 17,
              "v": { "a": 0, "k": 0, "ix": 17 }
            },
            { "ty": 6, "nm": "", "ix": 18, "v": 0 },
            { "ty": 6, "nm": "Spatial Options", "ix": 19, "v": 0 },
            {
              "ty": 7,
              "nm": "Smart Interpolation",
              "ix": 20,
              "v": { "a": 0, "k": 0, "ix": 20 }
            },
            {
              "ty": 7,
              "nm": "Mode",
              "ix": 21,
              "v": { "a": 0, "k": 1, "ix": 21 }
            },
            { "ty": 6, "nm": "Overlap (simulation)", "ix": 22, "v": 0 },
            {
              "ty": 7,
              "nm": "Overlap",
              "ix": 23,
              "v": { "a": 0, "k": 1, "ix": 23 }
            },
            {
              "ty": 0,
              "nm": "Delay (s)",
              "ix": 24,
              "v": { "a": 0, "k": 0.05, "ix": 24 }
            },
            {
              "ty": 0,
              "nm": "Overlap random",
              "ix": 25,
              "v": { "a": 0, "k": 0, "ix": 25 }
            },
            { "ty": 6, "nm": "", "ix": 26, "v": 0 },
            { "ty": 6, "nm": "Soft Body (simulation)", "ix": 27, "v": 0 },
            {
              "ty": 7,
              "nm": "Soft Body",
              "ix": 28,
              "v": { "a": 0, "k": 1, "ix": 28 }
            },
            {
              "ty": 0,
              "nm": "Soft-Body Flexibility",
              "ix": 29,
              "v": { "a": 0, "k": 100, "ix": 29 }
            },
            { "ty": 6, "nm": "", "ix": 30, "v": 0 },
            { "ty": 6, "nm": "", "ix": 31, "v": 0 },
            {
              "ty": 0,
              "nm": "Precision",
              "ix": 32,
              "v": { "a": 0, "k": 1, "ix": 32 }
            }
          ]
        }
      ],
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [1.559, 0.301],
                            [4.592, 0.246]
                          ],
                          "o": [
                            [-1.582, 0.136],
                            [-4.515, -0.87],
                            [0, 0]
                          ],
                          "v": [
                            [33.484, -49.817],
                            [28.763, -50.321],
                            [15.081, -51.998]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 1",
                  "cix": 2,
                  "ix": 1
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [5.934, 2]
                          ],
                          "o": [
                            [-6.142, -1.22],
                            [0, 0]
                          ],
                          "v": [
                            [45.948, -39.253],
                            [27.809, -44.091]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 2",
                  "cix": 2,
                  "ix": 2
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [8.245, 1.535]
                          ],
                          "o": [
                            [-7.277, -4.17],
                            [0, 0]
                          ],
                          "v": [
                            [49.398, -30.98],
                            [25.894, -39.619]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 3",
                  "cix": 2,
                  "ix": 3
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [2.327, 0.837],
                            [2.593, 0.399],
                            [4.568, 0.282]
                          ],
                          "o": [
                            [-1.955, -1.514],
                            [-2.469, -0.888],
                            [-4.523, -0.695],
                            [0, 0]
                          ],
                          "v": [
                            [43.109, -26.105],
                            [36.633, -29.66],
                            [28.974, -31.416],
                            [15.328, -32.883]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 4",
                  "cix": 2,
                  "ix": 4
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [3.177, -3.757],
                            [-7.946, -4.01],
                            [-2.869, -0.413],
                            [-4.801, 0.276],
                            [-20.526, -1.417],
                            [-9.382, 0.104],
                            [-2.757, -0.126],
                            [-3.246, -0.994],
                            [-1.29, 0.52],
                            [1.108, 0.84],
                            [-1.173, 0.13],
                            [-0.602, 1.016],
                            [1.122, 0.367],
                            [-0.469, 0.887],
                            [0.469, 0.887],
                            [0.772, 0.641],
                            [1.158, 0.72],
                            [0.071, 0.969],
                            [0.722, 0.65],
                            [2.135, 1.113],
                            [2.178, 0.214],
                            [0.659, 0.42],
                            [1.303, 0.554],
                            [1.627, 0.554],
                            [3.411, 0.108],
                            [1.844, -0.713],
                            [2.318, -0.928],
                            [2.991, 0.165],
                            [0.384, 0.023],
                            [12.695, 1.676],
                            [11.866, -3.083]
                          ],
                          "o": [
                            [-5.872, 6.942],
                            [2.592, 1.308],
                            [4.76, 0.686],
                            [20.541, -1.183],
                            [9.36, 0.646],
                            [2.759, -0.031],
                            [3.392, 0.155],
                            [1.33, 0.407],
                            [1.29, -0.52],
                            [1.179, -0.058],
                            [1.173, -0.13],
                            [0.602, -1.016],
                            [0.895, 0.453],
                            [0.469, -0.887],
                            [-0.469, -0.887],
                            [-1.049, -0.871],
                            [0.896, 0.377],
                            [-0.071, -0.969],
                            [-1.793, -1.613],
                            [-1.92, -1.001],
                            [0.083, -0.777],
                            [-1.176, -0.75],
                            [-1.582, -0.672],
                            [-3.22, -1.096],
                            [-1.976, -0.063],
                            [-2.329, 0.9],
                            [-2.781, 1.114],
                            [-0.384, -0.021],
                            [-12.79, -0.761],
                            [-11.9, -1.571],
                            [-4.762, 1.237]
                          ],
                          "v": [
                            [-95.794, -50.407],
                            [-91.6, -30.773],
                            [-83.332, -28.243],
                            [-68.931, -28.154],
                            [-7.929, -29.101],
                            [19.881, -25.064],
                            [28.153, -25.312],
                            [38.11, -23.301],
                            [42.184, -22.987],
                            [43.073, -26.306],
                            [46.613, -26.333],
                            [49.61, -27.97],
                            [48.747, -30.933],
                            [51.289, -31.885],
                            [51.146, -34.773],
                            [49.151, -36.999],
                            [45.836, -39.39],
                            [47.636, -41.025],
                            [46.119, -43.428],
                            [40.155, -47.474],
                            [33.772, -50.007],
                            [32.685, -51.948],
                            [28.499, -53.583],
                            [23.691, -55.443],
                            [13.712, -57.432],
                            [7.877, -56.611],
                            [1.29, -53.069],
                            [-7.582, -52.217],
                            [-8.733, -52.283],
                            [-46.928, -56.391],
                            [-83.299, -57.819]
                          ],
                          "c": true
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "fl",
                      "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
                      "o": { "a": 0, "k": 100, "ix": 5 },
                      "r": 1,
                      "nm": "Fill 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 5",
                  "cix": 2,
                  "ix": 5
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 1",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [-88.603, -44.887], "ix": 2 },
              "a": { "a": 0, "k": [-88.603, -44.887], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 10,
                    "s": [10]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 21,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 31,
                    "s": [10]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 42,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 52,
                    "s": [10]
                  },
                  { "t": 63, "s": [0] }
                ],
                "ix": 6,
                "x": "var $bm_rt;\nvar fx = effect('Kleaner');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"
              },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 27",
          "cix": 2,
          "ix": 1
        },
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-0.798, 0.223],
                            [-2.525, 0.273]
                          ],
                          "o": [
                            [0.825, -0.075],
                            [2.446, -0.683],
                            [0, 0]
                          ],
                          "v": [
                            [-18.361, -19.044],
                            [-15.94, -19.587],
                            [-8.466, -21.024]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 1",
                  "cix": 2,
                  "ix": 1
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-1.439, 0.562],
                            [-7.074, 3.908]
                          ],
                          "o": [
                            [1.539, -0.139],
                            [7.528, -2.937],
                            [0, 0]
                          ],
                          "v": [
                            [-35.398, 0.124],
                            [-30.951, -1.124],
                            [-9.017, -11.407]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 2",
                  "cix": 2,
                  "ix": 2
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-6.035, 2.575]
                          ],
                          "o": [
                            [5.316, -3.847],
                            [0, 0]
                          ],
                          "v": [
                            [-32.027, 8.455],
                            [-14.928, -1.218]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 3",
                  "cix": 2,
                  "ix": 3
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-7.55, 3.417]
                          ],
                          "o": [
                            [6.25, -5.442],
                            [0, 0]
                          ],
                          "v": [
                            [-24.102, 12.981],
                            [-3.254, -0.402]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 4",
                  "cix": 2,
                  "ix": 4
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [1.322, -0.56],
                            [3.355, -1.421],
                            [2.761, -1.193],
                            [5.784, -2.805],
                            [1.232, 1.547],
                            [-1.173, 0.583],
                            [2.443, 0.533],
                            [-0.062, 1.519],
                            [-0.601, 0.841],
                            [1.272, -0.044],
                            [0.895, 0.904],
                            [-0.925, 1.325],
                            [-1.399, 1.049],
                            [0.889, 0.756],
                            [-1.848, 1.324],
                            [-4.296, 2.533],
                            [0.16, 1.283],
                            [0.933, -0.212],
                            [1.343, 0.989],
                            [0.141, 0.393],
                            [-0.748, 0.768],
                            [-5.552, 0.767],
                            [-3.569, -0.08],
                            [-3.399, 0.15],
                            [-6.165, -2.795],
                            [-16.061, -5.949],
                            [-4.61, -3.546],
                            [-1.879, -2.005],
                            [-0.851, -2.655],
                            [0.161, -1.246],
                            [1.341, -1.329],
                            [3.39, -0.749],
                            [10.79, 5.771],
                            [8.963, 6.752],
                            [0.09, 0.068],
                            [1.774, 0.132]
                          ],
                          "o": [
                            [-3.355, 1.421],
                            [-2.813, 1.191],
                            [-5.912, 2.554],
                            [-1.293, 0.627],
                            [-0.808, -1.015],
                            [-2.127, 1.057],
                            [-1.485, -0.324],
                            [0.042, -1.033],
                            [-1.212, 0.387],
                            [-1.272, 0.044],
                            [-1.236, -1.248],
                            [1.001, -1.434],
                            [-1.137, -0.264],
                            [-3.214, -2.732],
                            [4.055, -2.905],
                            [0.866, -0.511],
                            [-0.197, -1.582],
                            [-1.626, 0.37],
                            [-0.336, -0.248],
                            [-0.362, -1.01],
                            [3.91, -4.016],
                            [3.536, -0.488],
                            [3.447, 0.078],
                            [6.945, -0.307],
                            [15.6, 7.071],
                            [5.411, 2.004],
                            [2.095, 1.611],
                            [1.904, 2.033],
                            [0.383, 1.196],
                            [-0.242, 1.872],
                            [-2.467, 2.443],
                            [-12.851, 2.839],
                            [-9.889, -5.288],
                            [-0.09, -0.068],
                            [-1.418, -1.073],
                            [-1.431, -0.107]
                          ],
                          "v": [
                            [17.368, -1.215],
                            [7.303, 3.047],
                            [-0.925, 6.915],
                            [-17.944, 15.932],
                            [-23.917, 16.58],
                            [-22.894, 12.159],
                            [-30.073, 14.36],
                            [-32.811, 11.178],
                            [-31.543, 8.397],
                            [-35.257, 9.219],
                            [-38.764, 8.011],
                            [-38.84, 3.784],
                            [-35.208, 0.028],
                            [-38.418, -1.279],
                            [-34.111, -7.546],
                            [-21.576, -15.708],
                            [-18.544, -18.734],
                            [-23.352, -18.935],
                            [-28.179, -19.346],
                            [-28.949, -20.31],
                            [-27.85, -23.152],
                            [-12.644, -29.564],
                            [-1.964, -30.176],
                            [8.414, -29.402],
                            [28.204, -23.734],
                            [75.715, -4.196],
                            [90.767, 3.109],
                            [97.091, 7.786],
                            [101.313, 14.92],
                            [101.801, 18.627],
                            [99.044, 23.454],
                            [90.018, 28.373],
                            [54.945, 18.197],
                            [26.479, 0.31],
                            [26.211, 0.107],
                            [21.505, -2.239]
                          ],
                          "c": true
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "fl",
                      "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
                      "o": { "a": 0, "k": 100, "ix": 5 },
                      "r": 1,
                      "nm": "Fill 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 5",
                  "cix": 2,
                  "ix": 5
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 2",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [90.698, 15.122], "ix": 2 },
              "a": { "a": 0, "k": [90.698, 15.122], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 1,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 11,
                    "s": [-10]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 22,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 32,
                    "s": [-10]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 43,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 53,
                    "s": [-10]
                  },
                  { "t": 64, "s": [0] }
                ],
                "ix": 6,
                "x": "var $bm_rt;\nvar fx = effect('Kleaner');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"
              },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 28",
          "cix": 2,
          "ix": 2
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [1.782, -14.865]
                  ],
                  "o": [
                    [3.129, 14.641],
                    [0, 0]
                  ],
                  "v": [
                    [30.084, 107.656],
                    [32.122, 152.32]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [0.269, 0.149, 0.011, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 0.684, "ix": 5 },
              "lc": 2,
              "lj": 2,
              "nm": "Stroke 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 3",
          "cix": 2,
          "ix": 3
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-2.516, -1.456],
                    [3.295, -2.919],
                    [1.805, -4.013],
                    [1.169, -4.354],
                    [0.978, 0.472],
                    [-0.308, 1.702],
                    [-1.107, 5.4],
                    [-1.538, 3.479],
                    [-2.796, -0.109],
                    [-0.109, -0.315],
                    [-2.666, -1.169]
                  ],
                  "o": [
                    [-4.307, -0.902],
                    [-3.288, 2.919],
                    [-1.853, 4.115],
                    [-0.984, -0.458],
                    [0.314, -1.709],
                    [0.984, -5.421],
                    [0.759, -3.698],
                    [1.565, -3.514],
                    [0.041, 0.335],
                    [0.978, 2.741],
                    [2.659, 1.169]
                  ],
                  "v": [
                    [-62.709, 103.159],
                    [-74.857, 106.953],
                    [-82.157, 117.829],
                    [-86.676, 130.571],
                    [-89.622, 129.177],
                    [-88.686, 124.064],
                    [-86.033, 107.746],
                    [-83.032, 96.768],
                    [-77.229, 93.11],
                    [-76.996, 94.088],
                    [-70.755, 99.83]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.269, 0.149, 0.011, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 4",
          "cix": 2,
          "ix": 4
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-33.768, -0.057],
                    [-4.911, 1.13]
                  ],
                  "o": [
                    [33.548, 3.849],
                    [5.04, 0.009],
                    [0, 0]
                  ],
                  "v": [
                    [-80.279, 101.421],
                    [20.803, 107.286],
                    [35.843, 106.125]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [0.269, 0.149, 0.011, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 0.684, "ix": 5 },
              "lc": 2,
              "lj": 2,
              "nm": "Stroke 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 5",
          "cix": 2,
          "ix": 5
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-1.339, -0.426],
                    [-10.223, 1.336]
                  ],
                  "o": [
                    [1.162, 0.79],
                    [9.825, 3.126],
                    [0, 0]
                  ],
                  "v": [
                    [67.18, -19.054],
                    [71.042, -17.402],
                    [101.307, -12.447]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [0.774, 0.537, 0.266, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 0.684, "ix": 5 },
              "lc": 2,
              "lj": 2,
              "nm": "Stroke 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 6",
          "cix": 2,
          "ix": 6
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-2.926, -1.853],
                    [-3.93, -6.32]
                  ],
                  "o": [
                    [3.301, 1.047],
                    [6.288, 3.981],
                    [0, 0]
                  ],
                  "v": [
                    [67.694, -7.063],
                    [76.889, -2.292],
                    [93.609, 12.201]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 0.684, "ix": 5 },
              "lc": 2,
              "lj": 2,
              "nm": "Stroke 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 7",
          "cix": 2,
          "ix": 7
        },
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-1.274, 1.504]
                          ],
                          "o": [
                            [1.953, 0.266],
                            [0, 0]
                          ],
                          "v": [
                            [-4.114, -101.27],
                            [1.178, -103.3]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 1",
                  "cix": 2,
                  "ix": 1
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-1.014, 0.497],
                            [-0.661, 0.915]
                          ],
                          "o": [
                            [1.075, 0.343],
                            [1.014, -0.497],
                            [0, 0]
                          ],
                          "v": [
                            [20.908, -107.117],
                            [24.197, -107.436],
                            [26.71, -109.656]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 2",
                  "cix": 2,
                  "ix": 2
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ty": "gr",
                      "it": [
                        {
                          "ind": 0,
                          "ty": "sh",
                          "ix": 1,
                          "ks": {
                            "a": 0,
                            "k": {
                              "i": [
                                [0, 0],
                                [-0.715, -0.187],
                                [-0.928, 0.903],
                                [-0.146, 1.037]
                              ],
                              "o": [
                                [0.369, 0.641],
                                [1.253, 0.328],
                                [0.75, -0.731],
                                [0, 0]
                              ],
                              "v": [
                                [13.769, -78.469],
                                [15.599, -77.322],
                                [19.266, -77.899],
                                [20.348, -80.785]
                              ],
                              "c": false
                            },
                            "ix": 2
                          },
                          "nm": "Path 1"
                        },
                        {
                          "ty": "st",
                          "c": {
                            "a": 0,
                            "k": [0.766, 0.462, 0.114, 1],
                            "ix": 3
                          },
                          "o": { "a": 0, "k": 100, "ix": 4 },
                          "w": { "a": 0, "k": 0.684, "ix": 5 },
                          "lc": 2,
                          "lj": 2,
                          "nm": "Stroke 1"
                        },
                        {
                          "ty": "tr",
                          "p": { "a": 0, "k": [0, 0], "ix": 2 },
                          "a": { "a": 0, "k": [0, 0], "ix": 1 },
                          "s": { "a": 0, "k": [100, 100], "ix": 3 },
                          "r": { "a": 0, "k": 0, "ix": 6 },
                          "o": { "a": 0, "k": 100, "ix": 7 },
                          "sk": { "a": 0, "k": 0, "ix": 4 },
                          "sa": { "a": 0, "k": 0, "ix": 5 },
                          "nm": "Transform"
                        }
                      ],
                      "nm": "Group 3",
                      "cix": 2,
                      "ix": 1
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [17.058, -78.953], "ix": 2 },
                      "a": { "a": 0, "k": [17.058, -78.953], "ix": 1 },
                      "s": {
                        "a": 1,
                        "k": [
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 10,
                            "s": [100, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 15,
                            "s": [50, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 20,
                            "s": [100, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 25,
                            "s": [50, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 30,
                            "s": [100, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 35,
                            "s": [50, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 40,
                            "s": [100, 100]
                          },
                          {
                            "i": { "x": [0.667, 0.667], "y": [1, 1] },
                            "o": { "x": [0.333, 0.333], "y": [0, 0] },
                            "t": 45,
                            "s": [50, 100]
                          },
                          { "t": 50, "s": [100, 100] }
                        ],
                        "ix": 3
                      },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 7",
                  "cix": 2,
                  "ix": 3
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-0.406, -2.61],
                            [-0.473, -0.307],
                            [-0.552, 0.427],
                            [-0.605, 0.346]
                          ],
                          "o": [
                            [-0.374, 2.615],
                            [0.087, 0.557],
                            [0.585, 0.38],
                            [0.552, -0.427],
                            [0, 0]
                          ],
                          "v": [
                            [12.336, -98.431],
                            [11.994, -90.543],
                            [12.713, -89.069],
                            [14.648, -89.378],
                            [16.24, -90.729]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 4",
                  "cix": 2,
                  "ix": 4
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-3.537, -1.207]
                          ],
                          "o": [
                            [3.242, -1.86],
                            [0, 0]
                          ],
                          "v": [
                            [18.207, -113.206],
                            [29.035, -114.249]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 5",
                  "cix": 2,
                  "ix": 5
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [-3.508, -0.779]
                          ],
                          "o": [
                            [2.215, -2.83],
                            [0, 0]
                          ],
                          "v": [
                            [-6.975, -106.392],
                            [2.647, -109.841]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "st",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 3 },
                      "o": { "a": 0, "k": 100, "ix": 4 },
                      "w": { "a": 0, "k": 0.684, "ix": 5 },
                      "lc": 2,
                      "lj": 2,
                      "nm": "Stroke 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 6",
                  "cix": 2,
                  "ix": 6
                },
                {
                  "ty": "tr",
                  "p": {
                    "a": 1,
                    "k": [
                      {
                        "i": { "x": 0.667, "y": 1 },
                        "o": { "x": 0.333, "y": 0 },
                        "t": 0,
                        "s": [11.03, -96.031],
                        "to": [-1.147, 1.154],
                        "ti": [1.147, -1.154]
                      },
                      {
                        "i": { "x": 0.667, "y": 0.667 },
                        "o": { "x": 0.333, "y": 0.333 },
                        "t": 10,
                        "s": [4.15, -89.104],
                        "to": [0, 0],
                        "ti": [0, 0]
                      },
                      {
                        "i": { "x": 0.667, "y": 1 },
                        "o": { "x": 0.333, "y": 0 },
                        "t": 52,
                        "s": [4.15, -89.104],
                        "to": [1.147, -1.154],
                        "ti": [-1.147, 1.154]
                      },
                      { "t": 62, "s": [11.03, -96.031] }
                    ],
                    "ix": 2,
                    "x": "var $bm_rt;\nvar fx = effect('Kleaner 2');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"
                  },
                  "a": { "a": 0, "k": [11.03, -96.031], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 13",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [4.811, 6.424]
                      ],
                      "o": [
                        [-2.448, -7.644],
                        [0, 0]
                      ],
                      "v": [
                        [45.195, -104.091],
                        [35.407, -125.961]
                      ],
                      "c": false
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 0.914, 0.761, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 0.684, "ix": 5 },
                  "lc": 2,
                  "lj": 2,
                  "nm": "Stroke 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 2",
              "cix": 2,
              "ix": 2
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [-6.603, -0.482]
                      ],
                      "o": [
                        [5.285, -3.987],
                        [0, 0]
                      ],
                      "v": [
                        [-2.249, -124.779],
                        [16.394, -130.276]
                      ],
                      "c": false
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 0.914, 0.761, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 0.684, "ix": 5 },
                  "lc": 2,
                  "lj": 2,
                  "nm": "Stroke 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 3",
              "cix": 2,
              "ix": 3
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [-2.513, 8.793],
                        [-10.816, 2.149]
                      ],
                      "o": [
                        [-1.487, -9.024],
                        [2.997, -10.488],
                        [0, 0]
                      ],
                      "v": [
                        [-24.575, -94.334],
                        [-23.417, -121.522],
                        [-0.858, -142.57]
                      ],
                      "c": false
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 0.914, 0.761, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 0.684, "ix": 5 },
                  "lc": 2,
                  "lj": 2,
                  "nm": "Stroke 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 4",
              "cix": 2,
              "ix": 4
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [0.268, 1.083],
                        [-4.033, 8.941],
                        [-9.408, 2.776]
                      ],
                      "o": [
                        [-0.385, -1.047],
                        [-2.359, -9.521],
                        [4.033, -8.941],
                        [0, 0]
                      ],
                      "v": [
                        [-18.298, -84.923],
                        [-19.255, -88.128],
                        [-17.114, -116.933],
                        [4.081, -136.027]
                      ],
                      "c": false
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 0.914, 0.761, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 0.684, "ix": 5 },
                  "lc": 2,
                  "lj": 2,
                  "nm": "Stroke 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 5",
              "cix": 2,
              "ix": 5
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [1.659, 2.583],
                        [-0.141, -0.074],
                        [-0.924, -1.008],
                        [-0.362, -1.417],
                        [-0.121, -1.457]
                      ],
                      "o": [
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [0.027, -3.07],
                        [0.084, 0.13],
                        [1.202, 0.632],
                        [0.988, 1.078],
                        [0.362, 1.417],
                        [0, 0]
                      ],
                      "v": [
                        [27.611, -124.924],
                        [24.994, -129.043],
                        [22.162, -125.857],
                        [22.19, -142.212],
                        [20.058, -151.055],
                        [20.67, -150.732],
                        [24.004, -148.344],
                        [25.965, -144.47],
                        [26.574, -140.131]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.914, 0.686, 0.424, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 6",
              "cix": 2,
              "ix": 6
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [1.775, 2.505],
                        [-0.016, -0.158],
                        [-0.589, -1.234],
                        [-1.179, -0.865],
                        [-1.306, -0.657]
                      ],
                      "o": [
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [-2.857, -1.123],
                        [0.089, 0.126],
                        [0.137, 1.351],
                        [0.63, 1.319],
                        [1.179, 0.865],
                        [0, 0]
                      ],
                      "v": [
                        [35.839, -130.478],
                        [33.425, -134.196],
                        [37.013, -135.88],
                        [21.834, -141.972],
                        [14.43, -147.256],
                        [14.5, -146.568],
                        [15.469, -142.583],
                        [18.328, -139.315],
                        [22.125, -137.128]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.887, 0.629, 0.333, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 7",
              "cix": 2,
              "ix": 7
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [-5.292, -0.708],
                        [0, 0],
                        [1.228, -4.69],
                        [0, 0]
                      ],
                      "o": [
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [0, 0],
                        [0, 0]
                      ],
                      "v": [
                        [14.43, -147.256],
                        [20.058, -151.055],
                        [21.695, -148.631],
                        [16.058, -145.415],
                        [15.006, -146.031]
                      ],
                      "c": false
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.774, 0.537, 0.266, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 8",
              "cix": 2,
              "ix": 8
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [-1.559, -9.407],
                        [-0.017, -0.104],
                        [0.437, -0.928],
                        [1.124, 1.005],
                        [0.124, -2.216],
                        [0.582, -0.777],
                        [0.818, 0.52],
                        [0.214, 0.379],
                        [0.494, 2.036],
                        [0.9, 2.246],
                        [1.209, 1.701],
                        [5.238, 0.741],
                        [5.019, -1.656],
                        [2.354, -1.286],
                        [1.335, -1.034],
                        [-1.565, -8.684],
                        [-1.315, -2.748],
                        [2.152, -1.016],
                        [0.468, 0.167],
                        [0.879, 3.596],
                        [0, 0],
                        [0.792, 0.582],
                        [0.298, 0.393],
                        [0.246, 0.438],
                        [0.201, 1.462],
                        [-0.13, 0.676],
                        [0.041, -0.012],
                        [0.606, 0.26],
                        [0.381, 0.472],
                        [0.092, 0.141],
                        [0.234, 1.109],
                        [-0.103, 5.837],
                        [-2.466, 4.997],
                        [-11.656, 1.127],
                        [-6.897, -5.058],
                        [-2.317, -3.646]
                      ],
                      "o": [
                        [0.018, 0.109],
                        [0.162, 1.016],
                        [-1.069, 2.282],
                        [0.427, 2.16],
                        [-0.052, 0.966],
                        [-0.583, 0.773],
                        [-0.368, -0.232],
                        [-1.045, -1.85],
                        [-0.575, -2.354],
                        [-0.772, -1.937],
                        [-3.065, -4.311],
                        [-5.231, -0.733],
                        [-2.546, 0.846],
                        [-1.48, 0.819],
                        [-6.963, 5.361],
                        [0.542, 3.006],
                        [0.584, 1.227],
                        [-0.445, 0.209],
                        [-3.489, -1.228],
                        [0, 0],
                        [-0.908, 0.388],
                        [-0.395, -0.289],
                        [-0.305, -0.401],
                        [-0.743, -1.294],
                        [-0.087, -0.67],
                        [-0.036, 0.011],
                        [-0.625, 0.188],
                        [-0.56, -0.239],
                        [-0.109, -0.131],
                        [-0.612, -0.94],
                        [-1.225, -5.721],
                        [0.098, -5.557],
                        [5.447, -11.024],
                        [8.404, -0.809],
                        [3.495, 2.569],
                        [5.062, 7.969]
                      ],
                      "v": [
                        [48.838, -108.049],
                        [48.889, -107.731],
                        [48.721, -104.705],
                        [45.168, -104.839],
                        [45.8, -98.362],
                        [45.023, -95.606],
                        [42.469, -94.936],
                        [41.644, -95.922],
                        [40.355, -101.788],
                        [38.061, -108.679],
                        [35.209, -114.234],
                        [21.79, -121.85],
                        [6.187, -119.982],
                        [-1.211, -116.823],
                        [-5.445, -114.065],
                        [-13.978, -92.374],
                        [-11.114, -83.689],
                        [-9.767, -77.517],
                        [-11.206, -77.601],
                        [-18.353, -85.489],
                        [-18.385, -85.48],
                        [-21.164, -85.951],
                        [-22.198, -86.988],
                        [-23.014, -88.26],
                        [-24.598, -92.445],
                        [-24.551, -94.469],
                        [-24.663, -94.43],
                        [-26.561, -94.585],
                        [-28.006, -95.683],
                        [-28.31, -96.098],
                        [-29.459, -99.27],
                        [-30.505, -117.116],
                        [-26.746, -133.229],
                        [4.348, -151.644],
                        [28.654, -145.66],
                        [37.285, -134.796]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.98, 0.943, 0.88, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 9",
              "cix": 2,
              "ix": 9
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [-0.719, -3.133],
                        [-0.342, -3.771],
                        [8.793, -10.194],
                        [1.603, -1.091],
                        [4.675, -0.219],
                        [5.247, 4.404],
                        [3.031, 7.013],
                        [0.735, 1.705],
                        [0.563, 1.338],
                        [0.208, 1.05],
                        [-0.866, 4.076],
                        [-1.456, 2.294],
                        [-6.685, 2.02],
                        [-3.436, 1.425],
                        [-4.017, -0.149],
                        [-3.383, -3.827],
                        [-0.348, -2.52]
                      ],
                      "o": [
                        [0.846, 3.69],
                        [1.121, 12.364],
                        [-1.267, 1.469],
                        [-3.862, 2.63],
                        [-6.922, 0.325],
                        [-6.033, -5.065],
                        [-0.742, -1.717],
                        [-0.585, -1.329],
                        [-0.417, -0.991],
                        [-1.632, -3.717],
                        [0.588, -2.663],
                        [3.691, -5.817],
                        [3.516, -1.062],
                        [3.695, -1.533],
                        [5.062, 0.188],
                        [1.769, 2.002],
                        [0.437, 3.161]
                      ],
                      "v": [
                        [39.807, -117.388],
                        [41.593, -106.179],
                        [35.495, -69.115],
                        [31.147, -65.305],
                        [18.029, -60.858],
                        [-0.697, -67.585],
                        [-12.503, -87.185],
                        [-14.82, -92.263],
                        [-16.543, -96.264],
                        [-17.996, -99.52],
                        [-19.958, -111.708],
                        [-16.732, -119.179],
                        [-0.658, -132.076],
                        [9.239, -136.899],
                        [20.928, -139.211],
                        [34.532, -133.029],
                        [37.183, -126.849]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 10",
              "cix": 2,
              "ix": 10
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [1.012, -4.84],
                        [-2.953, -3.972],
                        [-0.772, -0.69],
                        [2.017, -0.479],
                        [1.702, 0],
                        [2.208, 0.861],
                        [1.524, 1.709],
                        [0.69, 1.032],
                        [0.232, 0.991],
                        [-3.903, 6.686],
                        [0, 0],
                        [-2.55, 1.128],
                        [-0.089, 0.034],
                        [-0.718, -0.116],
                        [1.866, -4.32]
                      ],
                      "o": [
                        [-1.012, 4.847],
                        [0.622, 0.841],
                        [-1.798, 0.998],
                        [-1.682, 0.396],
                        [-2.372, 0.007],
                        [-1.873, -1.292],
                        [-0.827, -0.93],
                        [-0.369, -0.95],
                        [-1.784, -7.533],
                        [0, 0],
                        [0.26, -2.83],
                        [0.082, -0.034],
                        [0.725, -0.267],
                        [1.278, 4.437],
                        [-1.962, 4.546]
                      ],
                      "v": [
                        [42.286, -80.626],
                        [44.61, -66.414],
                        [46.723, -64.131],
                        [40.953, -61.902],
                        [35.853, -61.301],
                        [28.826, -62.524],
                        [23.706, -67.015],
                        [21.43, -69.968],
                        [20.534, -72.894],
                        [23.877, -95.323],
                        [43.619, -100.621],
                        [47.283, -107.86],
                        [47.536, -107.963],
                        [49.717, -108.168],
                        [47.509, -94.489]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [1, 0.914, 0.761, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 11",
              "cix": 2,
              "ix": 11
            },
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [-1.005, -2.215],
                        [0.902, -2.304],
                        [3.486, -1.955],
                        [2.017, -0.479],
                        [1.702, 0],
                        [2.208, 0.861],
                        [1.388, 1.668],
                        [0.526, 1.381],
                        [0.232, 0.991],
                        [-3.903, 6.686],
                        [0, 0],
                        [-2.55, 1.128],
                        [-0.089, 0.034],
                        [-0.718, -0.116],
                        [-1.148, -2.023],
                        [3.302, -4.662],
                        [2.112, -0.171]
                      ],
                      "o": [
                        [1.019, 2.256],
                        [-1.456, 3.719],
                        [-1.798, 0.998],
                        [-1.682, 0.396],
                        [-2.372, 0.007],
                        [-2.023, -0.779],
                        [-0.937, -1.128],
                        [-0.369, -0.95],
                        [-1.784, -7.533],
                        [0, 0],
                        [0.26, -2.83],
                        [0.082, -0.034],
                        [0.725, -0.267],
                        [2.174, 0.328],
                        [2.823, 4.97],
                        [-1.23, 1.729],
                        [2.352, 0.615]
                      ],
                      "v": [
                        [54.721, -79.935],
                        [54.515, -72.717],
                        [46.723, -64.131],
                        [40.953, -61.902],
                        [35.853, -61.301],
                        [28.826, -62.524],
                        [23.59, -66.161],
                        [21.43, -69.968],
                        [20.534, -72.894],
                        [23.877, -95.323],
                        [43.619, -100.621],
                        [47.283, -107.86],
                        [47.536, -107.963],
                        [49.717, -108.168],
                        [55.083, -103.964],
                        [54.269, -87.742],
                        [49.163, -84.297]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.98, 0.943, 0.88, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 12",
              "cix": 2,
              "ix": 12
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [19.765, -67.703], "ix": 2 },
              "a": { "a": 0, "k": [19.765, -67.703], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 10,
                    "s": [-5]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 21,
                    "s": [5]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 31,
                    "s": [-5]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 42,
                    "s": [5]
                  },
                  { "t": 52, "s": [0] }
                ],
                "ix": 6
              },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 29",
          "cix": 2,
          "ix": 8
        },
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [0, 0],
                            [2.462, -6.21],
                            [-1.021, -6.602],
                            [-2.468, -6.207],
                            [-3.938, -5.849],
                            [-3.065, -5.723],
                            [4.726, -10.148],
                            [1.22, -6.383],
                            [-3.594, -4.279],
                            [-3.218, -7.949],
                            [-9.224, -1.317],
                            [-6.244, 9.146],
                            [-4.596, 3.96],
                            [-5.73, -3.279],
                            [1.182, -6.495],
                            [-2.384, 11.604],
                            [2.517, 4.229],
                            [3.216, 3.302],
                            [-2.709, 3.73],
                            [-1.496, 1.628],
                            [-0.824, 1.935],
                            [8.642, 12.248],
                            [2.136, 2.684],
                            [3.534, 15.687]
                          ],
                          "o": [
                            [-6.26, 2.33],
                            [-2.462, 6.21],
                            [1.021, 6.602],
                            [2.603, 6.548],
                            [3.606, 5.356],
                            [5.285, 9.869],
                            [-2.743, 5.892],
                            [-1.049, 5.489],
                            [-9.214, -1.539],
                            [3.593, 8.873],
                            [10.963, 1.566],
                            [3.42, -5.01],
                            [5.001, -4.309],
                            [5.73, 3.279],
                            [10.312, -5.832],
                            [0.991, -4.821],
                            [-2.358, -3.961],
                            [-3.216, -3.302],
                            [1.348, -1.856],
                            [1.414, -1.538],
                            [5.974, -14.019],
                            [-1.978, -2.803],
                            [-10.015, -12.58],
                            [0, 0]
                          ],
                          "v": [
                            [-87.592, -135.525],
                            [-101.141, -121.558],
                            [-102.85, -101.828],
                            [-97.104, -82.675],
                            [-87.569, -64.118],
                            [-76.742, -47.561],
                            [-75.838, -15.181],
                            [-84.167, 2.356],
                            [-80.077, 18.052],
                            [-93.358, 36.151],
                            [-70.635, 52.909],
                            [-41.78, 40.196],
                            [-31.795, 25.088],
                            [-13.303, 23.312],
                            [-5.465, 40.155],
                            [14.827, 12.288],
                            [13.352, -2.061],
                            [3.56, -11.744],
                            [0.874, -24.16],
                            [5.98, -28.305],
                            [8.984, -34.037],
                            [2.651, -78.998],
                            [-3.731, -87.068],
                            [-24.406, -130.202]
                          ],
                          "c": false
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "fl",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 4 },
                      "o": { "a": 0, "k": 100, "ix": 5 },
                      "r": 1,
                      "nm": "Fill 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 1",
                  "cix": 2,
                  "ix": 1
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [1.038, 6.281],
                            [3.364, 5.809],
                            [5.637, 3.969],
                            [6.06, -0.843],
                            [2.617, -1.965],
                            [-0.582, -2.104],
                            [1.824, -0.072],
                            [1.691, -0.689],
                            [3.109, -3.202],
                            [-3.363, -11.215],
                            [-5.306, -7.234],
                            [-3.561, -1.306],
                            [-4.186, -1.583],
                            [-1.863, -0.056],
                            [-1.061, 1.533],
                            [-2.136, 0.904],
                            [-1.277, -0.449],
                            [-2.595, 0.483],
                            [-2.454, 3.217],
                            [-1.063, 6.331]
                          ],
                          "o": [
                            [-1.081, -6.542],
                            [-3.479, -6.008],
                            [-5.121, -3.605],
                            [-3.241, 0.451],
                            [-1.746, 1.311],
                            [-1.274, -1.308],
                            [-1.824, 0.072],
                            [-4.133, 1.684],
                            [-9.204, 9.477],
                            [2.576, 8.592],
                            [2.161, 2.947],
                            [4.173, 1.531],
                            [1.743, 0.659],
                            [1.863, 0.056],
                            [1.32, -1.907],
                            [1.247, -0.528],
                            [2.49, 0.876],
                            [3.978, -0.74],
                            [3.897, -5.107],
                            [1.093, -6.512]
                          ],
                          "v": [
                            [-16.633, -117.488],
                            [-22.521, -136.402],
                            [-37.487, -151.698],
                            [-56.699, -155.546],
                            [-65.677, -151.843],
                            [-68.493, -146.372],
                            [-73.509, -148.136],
                            [-78.782, -146.766],
                            [-90.001, -139.635],
                            [-92.337, -105.178],
                            [-80.419, -81.194],
                            [-71.834, -73.125],
                            [-59.207, -68.541],
                            [-53.817, -67.158],
                            [-48.902, -69.303],
                            [-45.559, -75.192],
                            [-41.624, -74.726],
                            [-33.85, -73.814],
                            [-24.22, -80.738],
                            [-16.671, -98.257]
                          ],
                          "c": true
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "fl",
                      "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 4 },
                      "o": { "a": 0, "k": 100, "ix": 5 },
                      "r": 1,
                      "nm": "Fill 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 2",
                  "cix": 2,
                  "ix": 2
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 9",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [-67.474, -135.814], "ix": 2 },
              "a": { "a": 0, "k": [-67.474, -135.314], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [5]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 10,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 68,
                    "s": [0]
                  },
                  { "t": 78, "s": [4] }
                ],
                "ix": 6,
                "x": "var $bm_rt;\nvar fx = effect('Kleaner 3');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"
              },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 32,
                    "s": [-2]
                  },
                  { "t": 80, "s": [0] }
                ],
                "ix": 4
              },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 30",
          "cix": 2,
          "ix": 9
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-0.064, -14.576],
                    [-6.909, 1.84],
                    [-8.276, 3.96],
                    [-0.116, 1.386],
                    [3.299, 3.977],
                    [2.574, 4.48],
                    [0.309, 6.834]
                  ],
                  "o": [
                    [12.313, 7.8],
                    [6.909, -1.84],
                    [8.866, -2.361],
                    [1.255, -0.6],
                    [-4.825, -1.848],
                    [-3.299, -3.977],
                    [-3.409, -5.931],
                    [0, 0]
                  ],
                  "v": [
                    [-66.185, -73.047],
                    [-45.893, -36.362],
                    [-25.165, -41.881],
                    [0.902, -50.584],
                    [3.675, -53.436],
                    [-8.523, -62.723],
                    [-16.988, -75.684],
                    [-24.203, -94.676]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [1, 0.886, 0.69, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 10",
          "cix": 2,
          "ix": 10
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-4.333, 0.929],
                    [-10.337, 4.335],
                    [-1.215, -3.57],
                    [-2.207, -3.255]
                  ],
                  "o": [
                    [3.759, -2.348],
                    [10.96, -2.35],
                    [1.215, 3.57],
                    [1.267, 3.723],
                    [0, 0]
                  ],
                  "v": [
                    [-95.107, -58.171],
                    [-82.533, -62.261],
                    [-50.495, -72.318],
                    [-46.85, -61.606],
                    [-42.085, -50.856]
                  ],
                  "c": false
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 11",
          "cix": 2,
          "ix": 11
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.159, 0.129],
                    [-3.182, -1.546],
                    [-1.936, -2.595],
                    [-1.77, -8.315],
                    [-0.624, -5.586],
                    [0.396, -5.581],
                    [0.204, -0.222],
                    [0.376, 0.003],
                    [11.851, 6.568],
                    [-0.462, 8.428],
                    [-1.781, 5.349],
                    [-3.158, 3.234]
                  ],
                  "o": [
                    [2.864, -2.325],
                    [2.912, 1.415],
                    [5.084, 6.814],
                    [1.173, 5.511],
                    [0.612, 5.474],
                    [-0.021, 0.301],
                    [-0.254, 0.277],
                    [-13.549, -0.102],
                    [-0.945, -8.388],
                    [0.309, -5.63],
                    [1.418, -4.258],
                    [0.148, -0.152]
                  ],
                  "v": [
                    [74.145, -68.272],
                    [84.741, -67.816],
                    [91.882, -61.371],
                    [101.768, -38.077],
                    [104.041, -21.428],
                    [105.144, -5.163],
                    [104.885, -4.316],
                    [103.832, -4.022],
                    [64.922, -14.24],
                    [64.195, -39.522],
                    [66.919, -56.163],
                    [73.684, -67.851]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.887, 0.629, 0.333, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 12",
          "cix": 2,
          "ix": 12
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.26, -7.984],
                    [1.887, 0.567],
                    [7.786, 6.665],
                    [0, 0],
                    [-4.006, 1.189]
                  ],
                  "o": [
                    [-1.941, -0.424],
                    [-9.823, -2.933],
                    [0, 0],
                    [4.17, 0.376],
                    [-0.328, 7.978]
                  ],
                  "v": [
                    [100.875, 2.37],
                    [95.119, 0.853],
                    [67.762, -12.696],
                    [88.556, -20.558],
                    [100.971, -21.583]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 13",
          "cix": 2,
          "ix": 13
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [-0.67, 11.45],
                    [-4.901, -0.69],
                    [-0.779, -0.068],
                    [-4.006, 1.189],
                    [-0.26, -7.984],
                    [-0.444, -5.366]
                  ],
                  "o": [
                    [1.497, -11.375],
                    [4.737, 1.449],
                    [0.766, 0.109],
                    [4.17, 0.376],
                    [-0.328, 7.978],
                    [0.171, 5.38],
                    [0, 0]
                  ],
                  "v": [
                    [68.992, 9.931],
                    [66.859, -26.354],
                    [86.239, -20.824],
                    [88.556, -20.558],
                    [100.971, -21.583],
                    [100.875, 2.37],
                    [101.804, 18.503]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 14",
          "cix": 2,
          "ix": 14
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0.089, -9.871],
                    [9.461, 0.273],
                    [12.154, 2.003],
                    [12.12, 3.664],
                    [10.924, 4.983],
                    [0.253, 0.116],
                    [0.978, 0.472],
                    [-0.308, 1.702],
                    [-1.107, 5.4],
                    [-1.538, 3.479],
                    [-2.796, -0.109],
                    [-0.827, -0.027],
                    [-10.22, -0.219],
                    [-19.086, -0.034],
                    [-1.36, 0],
                    [-8.798, 0.082],
                    [-1.627, -10.24]
                  ],
                  "o": [
                    [-9.427, 0.827],
                    [-12.776, -0.349],
                    [-12.489, -2.058],
                    [-11.491, -3.479],
                    [-0.253, -0.116],
                    [-0.984, -0.458],
                    [0.314, -1.709],
                    [0.984, -5.421],
                    [0.759, -3.698],
                    [1.565, -3.514],
                    [0.656, 0.021],
                    [10.22, 0.342],
                    [19.079, 0.417],
                    [1.36, 0.007],
                    [8.791, 0],
                    [1.114, 10.268],
                    [1.565, 9.844]
                  ],
                  "v": [
                    [50.788, 154.914],
                    [22.378, 155.707],
                    [-15.22, 152.077],
                    [-52.202, 143.512],
                    [-85.91, 130.927],
                    [-86.676, 130.571],
                    [-89.622, 129.177],
                    [-88.686, 124.064],
                    [-86.033, 107.746],
                    [-83.032, 96.768],
                    [-77.229, 93.11],
                    [-75.021, 93.206],
                    [-44.362, 94.027],
                    [12.889, 94.71],
                    [16.977, 94.717],
                    [44.478, 95.332],
                    [48.054, 125.356]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.4, 0.269, 0.12, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 15",
          "cix": 2,
          "ix": 15
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-10.309, 0.321],
                    [-6.767, 1.374],
                    [-3.218, 0.387],
                    [-1.764, 2.347],
                    [1.031, -0.161],
                    [-3.513, 0.448],
                    [-1.783, 0.008],
                    [-1.355, -0.023],
                    [-5.384, -3.98],
                    [-0.362, -1.846],
                    [-0.643, -3.589],
                    [4.457, -37.953],
                    [1.046, -4.184],
                    [-0.622, 0],
                    [20.904, 1.333],
                    [10.787, 1.21],
                    [5.387, 0.656],
                    [3.507, 0.465],
                    [-0.075, 0.301],
                    [-0.13, 0.554],
                    [-0.314, 18.785],
                    [0.834, 15.313],
                    [0.062, 3.438],
                    [-0.793, 7.349],
                    [-0.793, 1.162],
                    [-2.502, 0.226]
                  ],
                  "o": [
                    [6.902, -0.215],
                    [3.214, -0.652],
                    [2.65, -0.319],
                    [0.444, -0.59],
                    [3.498, -0.547],
                    [1.769, -0.226],
                    [1.356, -0.006],
                    [6.086, 0.105],
                    [1.408, 1.046],
                    [0.697, 3.582],
                    [6.727, 37.482],
                    [-0.499, 4.279],
                    [-0.26, 1.032],
                    [-20.761, 3.056],
                    [-10.835, -0.69],
                    [-5.387, -0.608],
                    [-0.581, -0.068],
                    [-3.603, -0.485],
                    [0.13, -0.547],
                    [4.286, -18.293],
                    [0.26, -15.374],
                    [-0.191, -3.425],
                    [-0.13, -7.39],
                    [0.15, -1.395],
                    [1.415, -2.071],
                    [10.35, -0.93]
                  ],
                  "v": [
                    [-38.004, -46.746],
                    [-17.448, -49.141],
                    [-7.891, -50.985],
                    [-1.415, -54.104],
                    [-0.315, -59.871],
                    [10.203, -61.364],
                    [15.53, -61.81],
                    [19.595, -61.68],
                    [37.123, -59.645],
                    [39.31, -48.906],
                    [41.327, -38.153],
                    [47.021, 75.672],
                    [45.182, 88.688],
                    [44.499, 100.295],
                    [-18.241, 102.079],
                    [-50.671, 99.112],
                    [-66.838, 97.198],
                    [-74.549, 96.248],
                    [-81.556, 94.915],
                    [-81.166, 93.268],
                    [-74.255, 37.439],
                    [-76.6, -8.465],
                    [-76.989, -18.753],
                    [-76.128, -40.888],
                    [-74.993, -44.9],
                    [-68.274, -47.689]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.796, 0.669, 0.524, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 16",
          "cix": 2,
          "ix": 16
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [2.728, -4.095],
                    [4.437, -2.133],
                    [2.345, 0.232],
                    [2.01, 2.297],
                    [1.224, 2.796],
                    [1.654, 5.646],
                    [-0.889, 7.034],
                    [-2.447, 16.632],
                    [0, 0]
                  ],
                  "o": [
                    [-1.962, 4.519],
                    [-2.734, 4.095],
                    [-2.119, 1.019],
                    [-3.035, -0.308],
                    [-2.003, -2.297],
                    [-2.358, -5.393],
                    [1.538, -6.932],
                    [2.105, -16.673],
                    [0, 0],
                    [0, 0]
                  ],
                  "v": [
                    [-42.967, 32.824],
                    [-49.632, 45.984],
                    [-60.364, 55.875],
                    [-67.187, 57.318],
                    [-74.966, 52.922],
                    [-79.553, 45.047],
                    [-85.5, 28.456],
                    [-81.973, 7.47],
                    [-76.531, -42.644],
                    [-59.722, -9.422]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.6, 0.488, 0.36, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 17",
          "cix": 2,
          "ix": 17
        },
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [0, 0],
                        [2.728, -4.095],
                        [4.437, -2.133],
                        [2.345, 0.232],
                        [2.01, 2.297],
                        [1.224, 2.796],
                        [1.654, 5.646],
                        [2.01, 9.878],
                        [0.185, 5.92],
                        [-0.718, 2.734],
                        [-9.078, 2.905],
                        [0, 0]
                      ],
                      "o": [
                        [-1.962, 4.519],
                        [-2.734, 4.095],
                        [-2.119, 1.019],
                        [-3.035, -0.308],
                        [-2.003, -2.297],
                        [-2.358, -5.393],
                        [-2.837, -9.659],
                        [-1.189, -5.804],
                        [-0.089, -2.83],
                        [2.406, -9.222],
                        [0, 0],
                        [0, 0]
                      ],
                      "v": [
                        [-42.967, 32.824],
                        [-49.632, 45.984],
                        [-60.364, 55.875],
                        [-67.187, 57.318],
                        [-74.966, 52.922],
                        [-79.553, 45.047],
                        [-85.5, 28.456],
                        [-92.377, -1.014],
                        [-94.934, -18.575],
                        [-94.161, -26.997],
                        [-74.091, -45.639],
                        [-59.722, -9.422]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.796, 0.669, 0.524, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 1",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 18",
          "cix": 2,
          "ix": 18
        },
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ty": "gr",
                      "it": [
                        {
                          "ind": 0,
                          "ty": "sh",
                          "ix": 1,
                          "ks": {
                            "a": 0,
                            "k": {
                              "i": [
                                [0.335, -3.404],
                                [7.458, 6.111],
                                [0, 0],
                                [0, 0],
                                [-2.55, -8.538],
                                [-0.827, -8.873],
                                [-0.294, -7.273]
                              ],
                              "o": [
                                [-6.959, -6.672],
                                [0, 0],
                                [0, 0],
                                [6.111, 6.48],
                                [2.557, 8.538],
                                [0.677, 7.246],
                                [0.144, 3.418]
                              ],
                              "v": [
                                [55.341, 30.931],
                                [33.698, 11.742],
                                [35.68, -46.609],
                                [36.747, -50.663],
                                [49.469, -27.428],
                                [53.973, -1.116],
                                [55.436, 20.67]
                              ],
                              "c": true
                            },
                            "ix": 2
                          },
                          "nm": "Path 1"
                        },
                        {
                          "ty": "fl",
                          "c": { "a": 0, "k": [0.6, 0.488, 0.36, 1], "ix": 4 },
                          "o": { "a": 0, "k": 100, "ix": 5 },
                          "r": 1,
                          "nm": "Fill 1"
                        },
                        {
                          "ty": "tr",
                          "p": { "a": 0, "k": [0, 0], "ix": 2 },
                          "a": { "a": 0, "k": [0, 0], "ix": 1 },
                          "s": { "a": 0, "k": [100, 100], "ix": 3 },
                          "r": { "a": 0, "k": 0, "ix": 6 },
                          "o": { "a": 0, "k": 100, "ix": 7 },
                          "sk": { "a": 0, "k": 0, "ix": 4 },
                          "sa": { "a": 0, "k": 0, "ix": 5 },
                          "nm": "Transform"
                        }
                      ],
                      "nm": "Group 1",
                      "cix": 2,
                      "ix": 1
                    },
                    {
                      "ty": "gr",
                      "it": [
                        {
                          "ind": 0,
                          "ty": "sh",
                          "ix": 1,
                          "ks": {
                            "a": 0,
                            "k": {
                              "i": [
                                [-1.62, -3.151],
                                [12.305, -6.699],
                                [2.324, 2.331],
                                [-1.34, 1.107],
                                [-3.842, 3.165],
                                [-3.979, 4.45],
                                [-1.319, 1.777]
                              ],
                              "o": [
                                [-8.094, 11.443],
                                [-2.263, -2.406],
                                [1.408, -1.019],
                                [3.842, -3.165],
                                [4.614, -3.801],
                                [1.477, -1.654],
                                [1.716, 3.104]
                              ],
                              "v": [
                                [99.739, 16.61],
                                [68.601, 44.309],
                                [61.717, 37.199],
                                [65.812, 33.966],
                                [77.338, 24.464],
                                [90.558, 12.392],
                                [94.735, 7.231]
                              ],
                              "c": true
                            },
                            "ix": 2
                          },
                          "nm": "Path 1"
                        },
                        {
                          "ty": "fl",
                          "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 4 },
                          "o": { "a": 0, "k": 100, "ix": 5 },
                          "r": 1,
                          "nm": "Fill 1"
                        },
                        {
                          "ty": "tr",
                          "p": { "a": 0, "k": [0, 0], "ix": 2 },
                          "a": { "a": 0, "k": [0, 0], "ix": 1 },
                          "s": { "a": 0, "k": [100, 100], "ix": 3 },
                          "r": { "a": 0, "k": 0, "ix": 6 },
                          "o": { "a": 0, "k": 100, "ix": 7 },
                          "sk": { "a": 0, "k": 0, "ix": 4 },
                          "sa": { "a": 0, "k": 0, "ix": 5 },
                          "nm": "Transform"
                        }
                      ],
                      "nm": "Group 2",
                      "cix": 2,
                      "ix": 2
                    },
                    {
                      "ty": "gr",
                      "it": [
                        {
                          "ind": 0,
                          "ty": "sh",
                          "ix": 1,
                          "ks": {
                            "a": 0,
                            "k": {
                              "i": [
                                [-2.071, -3.056],
                                [3.09, -2.495],
                                [3.644, -2.871],
                                [0.472, -4.327],
                                [0.8, 0.772],
                                [1.579, 3.24],
                                [0, 0]
                              ],
                              "o": [
                                [-0.725, 3.828],
                                [-3.616, 2.905],
                                [-3.452, 2.714],
                                [-0.909, -0.649],
                                [-2.557, -2.481],
                                [0, 0],
                                [2.81, 2.434]
                              ],
                              "v": [
                                [102.208, 23.726],
                                [95.686, 33.426],
                                [84.202, 41.267],
                                [77.25, 52.054],
                                [74.679, 49.907],
                                [67.714, 41.485],
                                [94.463, 15.741]
                              ],
                              "c": true
                            },
                            "ix": 2
                          },
                          "nm": "Path 1"
                        },
                        {
                          "ty": "fl",
                          "c": {
                            "a": 0,
                            "k": [0.766, 0.462, 0.114, 1],
                            "ix": 4
                          },
                          "o": { "a": 0, "k": 100, "ix": 5 },
                          "r": 1,
                          "nm": "Fill 1"
                        },
                        {
                          "ty": "tr",
                          "p": { "a": 0, "k": [0, 0], "ix": 2 },
                          "a": { "a": 0, "k": [0, 0], "ix": 1 },
                          "s": { "a": 0, "k": [100, 100], "ix": 3 },
                          "r": { "a": 0, "k": 0, "ix": 6 },
                          "o": { "a": 0, "k": 100, "ix": 7 },
                          "sk": { "a": 0, "k": 0, "ix": 4 },
                          "sa": { "a": 0, "k": 0, "ix": 5 },
                          "nm": "Transform"
                        }
                      ],
                      "nm": "Group 3",
                      "cix": 2,
                      "ix": 3
                    },
                    {
                      "ty": "gr",
                      "it": [
                        {
                          "ind": 0,
                          "ty": "sh",
                          "ix": 1,
                          "ks": {
                            "a": 0,
                            "k": {
                              "i": [
                                [1.839, -4.819],
                                [1.381, -1.176],
                                [1.169, -0.465],
                                [4.806, 1.36],
                                [2.14, 1.552],
                                [0.8, 0.772],
                                [1.579, 3.24],
                                [0, 0],
                                [-2.071, -3.056],
                                [-0.335, -0.629],
                                [-0.52, -2.611]
                              ],
                              "o": [
                                [-0.649, 1.702],
                                [-0.957, 0.82],
                                [-4.628, 1.859],
                                [-2.55, -0.718],
                                [-0.909, -0.649],
                                [-2.557, -2.481],
                                [0, 0],
                                [2.81, 2.434],
                                [0.403, 0.581],
                                [1.244, 2.352],
                                [1.012, 5.059]
                              ],
                              "v": [
                                [105.27, 48.356],
                                [102.304, 52.867],
                                [99.036, 54.727],
                                [84.352, 55.506],
                                [77.25, 52.054],
                                [74.679, 49.907],
                                [67.714, 41.485],
                                [94.463, 15.741],
                                [102.208, 23.726],
                                [103.308, 25.537],
                                [105.79, 33.098]
                              ],
                              "c": true
                            },
                            "ix": 2
                          },
                          "nm": "Path 1"
                        },
                        {
                          "ty": "fl",
                          "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
                          "o": { "a": 0, "k": 100, "ix": 5 },
                          "r": 1,
                          "nm": "Fill 1"
                        },
                        {
                          "ty": "tr",
                          "p": { "a": 0, "k": [0, 0], "ix": 2 },
                          "a": { "a": 0, "k": [0, 0], "ix": 1 },
                          "s": { "a": 0, "k": [100, 100], "ix": 3 },
                          "r": { "a": 0, "k": 0, "ix": 6 },
                          "o": { "a": 0, "k": 100, "ix": 7 },
                          "sk": { "a": 0, "k": 0, "ix": 4 },
                          "sa": { "a": 0, "k": 0, "ix": 5 },
                          "nm": "Transform"
                        }
                      ],
                      "nm": "Group 4",
                      "cix": 2,
                      "ix": 4
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 1",
                  "cix": 2,
                  "ix": 1
                },
                {
                  "ty": "gr",
                  "it": [
                    {
                      "ind": 0,
                      "ty": "sh",
                      "ix": 1,
                      "ks": {
                        "a": 0,
                        "k": {
                          "i": [
                            [-1.62, -3.151],
                            [12.305, -6.699],
                            [2.324, 2.331],
                            [2.153, 2.058],
                            [7.458, 6.111],
                            [0, 0],
                            [0, 0],
                            [-7.636, -9.796],
                            [-7.048, -11.662],
                            [-2.105, -3.814]
                          ],
                          "o": [
                            [-8.094, 11.443],
                            [-2.263, -2.406],
                            [-2.099, -2.119],
                            [-6.959, -6.672],
                            [0, 0],
                            [0, 0],
                            [12.564, 3.151],
                            [8.381, 10.753],
                            [2.249, 3.732],
                            [1.716, 3.104]
                          ],
                          "v": [
                            [99.739, 16.61],
                            [68.601, 44.309],
                            [61.717, 37.199],
                            [55.34, 30.931],
                            [33.697, 11.742],
                            [35.679, -46.609],
                            [36.144, -60.213],
                            [65.026, -37.757],
                            [88.193, -4.096],
                            [94.735, 7.231]
                          ],
                          "c": true
                        },
                        "ix": 2
                      },
                      "nm": "Path 1"
                    },
                    {
                      "ty": "fl",
                      "c": { "a": 0, "k": [0.796, 0.669, 0.524, 1], "ix": 4 },
                      "o": { "a": 0, "k": 100, "ix": 5 },
                      "r": 1,
                      "nm": "Fill 1"
                    },
                    {
                      "ty": "tr",
                      "p": { "a": 0, "k": [0, 0], "ix": 2 },
                      "a": { "a": 0, "k": [0, 0], "ix": 1 },
                      "s": { "a": 0, "k": [100, 100], "ix": 3 },
                      "r": { "a": 0, "k": 0, "ix": 6 },
                      "o": { "a": 0, "k": 100, "ix": 7 },
                      "sk": { "a": 0, "k": 0, "ix": 4 },
                      "sa": { "a": 0, "k": 0, "ix": 5 },
                      "nm": "Transform"
                    }
                  ],
                  "nm": "Group 2",
                  "cix": 2,
                  "ix": 2
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0.5, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 19",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [36.649, -59.928], "ix": 2 },
              "a": { "a": 0, "k": [36.649, -59.928], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [13]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 10,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 64,
                    "s": [0]
                  },
                  { "t": 74, "s": [13] }
                ],
                "ix": 6,
                "x": "var $bm_rt;\nvar fx = effect('Kleaner 4');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"
              },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 31",
          "cix": 2,
          "ix": 19
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.246, -6.2],
                    [1.641, 0.102],
                    [1.805, 2.755],
                    [0.342, 1.962],
                    [-1.805, 5.236],
                    [-3.726, 4.095],
                    [-1.401, 0.889],
                    [0, 0],
                    [-0.205, -7.041]
                  ],
                  "o": [
                    [-1.552, 0.547],
                    [-3.281, -0.205],
                    [-1.087, -1.661],
                    [-0.957, -5.455],
                    [1.812, -5.23],
                    [1.114, -1.224],
                    [0, 0],
                    [-0.014, 7.034],
                    [0.185, 6.2]
                  ],
                  "v": [
                    [74.645, -23.217],
                    [69.812, -22.526],
                    [61.513, -27.202],
                    [59.524, -32.787],
                    [60.967, -49.159],
                    [69.505, -63.268],
                    [73.217, -66.557],
                    [73.722, -62.92],
                    [73.962, -41.817]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.774, 0.537, 0.266, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 20",
          "cix": 2,
          "ix": 20
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [4.197, -24.842],
                    [0.253, -1.203],
                    [7.807, 0.116],
                    [-0.643, 25.689],
                    [-9.399, 9.222],
                    [0, 0]
                  ],
                  "o": [
                    [-0.205, 1.203],
                    [-7.725, 1.292],
                    [-0.8, -25.689],
                    [4.354, -12.53],
                    [0, 0],
                    [2.058, 25.115]
                  ],
                  "v": [
                    [50.897, 99.591],
                    [50.221, 103.2],
                    [26.602, 104.526],
                    [26.356, 27.438],
                    [46.304, -6.134],
                    [51, 24.211]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.774, 0.537, 0.266, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 21",
          "cix": 2,
          "ix": 21
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0.014, -2.372],
                    [0, -1.039],
                    [-0.205, -7.041],
                    [-0.246, -6.2],
                    [-0.15, -9.981],
                    [-0.205, -26.175],
                    [1.224, -1.894],
                    [0.991, -0.731],
                    [8.128, -1.347],
                    [7.807, 0.116],
                    [-0.643, 25.689],
                    [-0.984, 16.297],
                    [0, 0],
                    [-8.695, 3.944],
                    [-2.673, 5.961],
                    [0.718, 5.448],
                    [-4.204, 0.075],
                    [-4.04, -0.178],
                    [-2.092, -0.178]
                  ],
                  "o": [
                    [-0.007, 1.039],
                    [-0.014, 7.034],
                    [0.185, 6.2],
                    [0.41, 9.974],
                    [0.41, 26.175],
                    [0.014, 2.256],
                    [-0.663, 1.032],
                    [-6.61, 4.888],
                    [-7.725, 1.292],
                    [-0.8, -25.689],
                    [0.396, -16.324],
                    [0, 0],
                    [9.468, 1.251],
                    [5.954, -2.7],
                    [2.242, -5.018],
                    [4.184, -0.342],
                    [4.033, -0.068],
                    [2.099, 0.096],
                    [2.386, 0.205]
                  ],
                  "v": [
                    [73.729, -66.037],
                    [73.722, -62.92],
                    [73.962, -41.817],
                    [74.645, -23.217],
                    [75.623, 6.711],
                    [76.546, 85.242],
                    [75.315, 91.798],
                    [72.69, 94.355],
                    [50.221, 103.2],
                    [26.602, 104.526],
                    [26.356, 27.438],
                    [28.428, -21.501],
                    [-3.196, -34.735],
                    [24.627, -39.787],
                    [39.187, -52.249],
                    [40.295, -68.477],
                    [52.88, -69.1],
                    [64.993, -68.942],
                    [76.867, -69.455]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.887, 0.629, 0.333, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 22",
          "cix": 2,
          "ix": 22
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [0, 0],
                    [0.014, -0.055],
                    [5.27, -4.074],
                    [6.419, -1.969],
                    [2.071, -0.253],
                    [4.279, 3.63],
                    [-0.321, 5.599],
                    [-1.62, 2.953],
                    [-1.675, 1.832],
                    [-8.976, 2.933],
                    [-0.451, 0.144],
                    [0, 0]
                  ],
                  "o": [
                    [-0.014, 0.055],
                    [-1.47, 6.494],
                    [-5.318, 4.115],
                    [-1.996, 0.615],
                    [-5.564, 0.69],
                    [-4.272, -3.63],
                    [0.191, -3.363],
                    [1.196, -2.174],
                    [9.345, 0.752],
                    [0.437, -0.144],
                    [0, 0],
                    [0, 0]
                  ],
                  "v": [
                    [76.334, 90.52],
                    [76.3, 90.677],
                    [65.314, 106.905],
                    [47.267, 115.628],
                    [41.183, 117.05],
                    [25.481, 112.497],
                    [18.973, 97.629],
                    [21.961, 88.059],
                    [26.274, 82.016],
                    [54.247, 78.119],
                    [55.58, 77.689],
                    [76.204, 90.438]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.6, 0.488, 0.36, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 23",
          "cix": 2,
          "ix": 23
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [1.114, -19.845],
                    [11.662, -1.012],
                    [9.461, 0.273],
                    [0.984, 12.578],
                    [-0.321, 8.189],
                    [-0.301, 5.134],
                    [-4.293, -0.349],
                    [-8.976, 2.933],
                    [-0.451, 0.144],
                    [-2.283, -0.841],
                    [0, 0],
                    [-0.096, -0.239],
                    [-0.027, -0.082]
                  ],
                  "o": [
                    [-11.061, 2.953],
                    [-9.427, 0.827],
                    [-5.571, -11.293],
                    [-0.636, -8.162],
                    [0.191, -5.141],
                    [4.067, 1.511],
                    [9.345, 0.752],
                    [0.437, -0.144],
                    [2.365, -0.738],
                    [0, 0],
                    [0.103, 0.239],
                    [0.034, 0.082],
                    [7.383, 18.402]
                  ],
                  "v": [
                    [85.029, 149.042],
                    [50.788, 154.914],
                    [22.378, 155.707],
                    [13.156, 119.251],
                    [12.889, 94.71],
                    [13.682, 79.288],
                    [26.274, 82.016],
                    [54.247, 78.119],
                    [55.58, 77.689],
                    [62.703, 77.217],
                    [75.91, 89.713],
                    [76.204, 90.438],
                    [76.3, 90.677]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.796, 0.669, 0.524, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 24",
          "cix": 2,
          "ix": 24
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.342, -0.205],
                    [3.397, -3.302],
                    [2.68, -0.991],
                    [2.57, 1.258],
                    [0.027, 3.965],
                    [-2.051, 3.404],
                    [-0.198, 0.301],
                    [-2.146, -0.061],
                    [-4.676, 0.581],
                    [-1.552, -1.367]
                  ],
                  "o": [
                    [-1.962, 4.307],
                    [-2.051, 1.996],
                    [-2.687, 0.991],
                    [-3.562, -1.743],
                    [-0.021, -3.972],
                    [0.185, -0.308],
                    [2.146, 0.061],
                    [4.71, 0.144],
                    [0.848, 1.887],
                    [0.294, 0.26]
                  ],
                  "v": [
                    [35.816, -68.915],
                    [27.681, -57.362],
                    [20.633, -52.584],
                    [12.28, -52.734],
                    [6.736, -62.578],
                    [10.386, -73.761],
                    [10.954, -74.671],
                    [17.386, -74.486],
                    [31.509, -74.794],
                    [34.852, -69.619]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [0.766, 0.462, 0.114, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 25",
          "cix": 2,
          "ix": 25
        },
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 0,
                "k": {
                  "i": [
                    [-0.952, -2.246],
                    [5.667, -1.518],
                    [5.824, 0.622],
                    [11.211, 4.806],
                    [-2.058, 4.778],
                    [0.191, 5.202],
                    [-5.441, -0.157],
                    [-2.146, -0.061],
                    [-4.676, 0.581],
                    [-1.552, -1.367],
                    [-0.342, -0.205],
                    [-1.897, -0.094],
                    [-0.223, -0.579],
                    [-0.782, -1.845]
                  ],
                  "o": [
                    [-2.775, 5.168],
                    [-5.66, 1.524],
                    [-12.127, -1.285],
                    [4.717, -2.208],
                    [2.064, -4.785],
                    [5.435, 0.157],
                    [2.146, 0.061],
                    [4.71, 0.144],
                    [0.848, 1.887],
                    [0.294, 0.26],
                    [1.663, 0.992],
                    [-0.187, -0.009],
                    [0.72, 1.869],
                    [0.952, 2.246]
                  ],
                  "v": [
                    [48.292, -50.259],
                    [34.497, -40.149],
                    [17.031, -39.438],
                    [-18.236, -48.646],
                    [-7.866, -59.857],
                    [-5.364, -75.142],
                    [10.954, -74.671],
                    [17.386, -74.486],
                    [31.509, -74.794],
                    [34.852, -69.619],
                    [35.816, -68.915],
                    [41.513, -68.109],
                    [43.087, -62.543],
                    [45.436, -56.999]
                  ],
                  "c": true
                },
                "ix": 2
              },
              "nm": "Path 1"
            },
            {
              "ty": "fl",
              "c": { "a": 0, "k": [1, 0.749, 0.4, 1], "ix": 4 },
              "o": { "a": 0, "k": 100, "ix": 5 },
              "r": 1,
              "nm": "Fill 1"
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Group 26",
          "cix": 2,
          "ix": 26
        }
      ],
      "ip": 0,
      "op": 120,
      "st": 0,
      "ct": 1
    },
    {
      "ind": 3,
      "ty": 4,
      "nm": "Layer 1",
      "parent": 1,
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 80, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [50, 205.816, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [0, 155.816, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 0,
                    "k": {
                      "i": [
                        [6.343, -17.804],
                        [38.52, -10.254],
                        [11.663, -1.011],
                        [9.464, 0.272],
                        [12.156, 2.003],
                        [12.118, 3.664],
                        [10.924, 4.985],
                        [1.232, 0.6],
                        [-12.313, 62.42],
                        [-18.657, 11.404],
                        [-28.298, -25.006],
                        [-11.505, -5.85],
                        [-14.158, 6.514],
                        [-9.616, 10.38],
                        [-8.712, 7.701],
                        [-13.154, -14.594],
                        [0.24, -11.031],
                        [4.069, -14.923],
                        [1.188, -8.927],
                        [-12.876, 1.011]
                      ],
                      "o": [
                        [-14.872, 41.748],
                        [-11.063, 2.951],
                        [-9.426, 0.828],
                        [-12.775, -0.354],
                        [-12.49, -2.06],
                        [-11.492, -3.475],
                        [-1.245, -0.569],
                        [-53.209, -25.771],
                        [4.233, -21.455],
                        [35.721, -21.841],
                        [9.679, 8.548],
                        [14.411, 7.329],
                        [12.857, -5.913],
                        [7.904, -8.529],
                        [13.217, -11.682],
                        [7.392, 8.194],
                        [-0.335, 15.561],
                        [-2.35, 8.618],
                        [-2.022, 15.245],
                        [21.677, -1.699]
                      ],
                      "v": [
                        [171.483, 74.165],
                        [85.03, 149.044],
                        [50.787, 154.913],
                        [22.376, 155.709],
                        [-15.222, 152.076],
                        [-52.2, 143.509],
                        [-85.912, 130.924],
                        [-89.621, 129.174],
                        [-172.852, -11.916],
                        [-138.439, -65.567],
                        [-33.79, -44.491],
                        [-3.376, -20.71],
                        [39.314, -21.797],
                        [73.456, -46.55],
                        [96.611, -72.599],
                        [143.104, -74.406],
                        [153.023, -43.644],
                        [144.576, 2.009],
                        [136.963, 27.741],
                        [155.588, 41.988]
                      ],
                      "c": true
                    },
                    "ix": 2
                  },
                  "nm": "Path 1"
                },
                {
                  "ty": "fl",
                  "c": { "a": 0, "k": [0.989, 0.968, 0.931, 1], "ix": 4 },
                  "o": { "a": 0, "k": 100, "ix": 5 },
                  "r": 1,
                  "nm": "Fill 1"
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Group 1",
              "cix": 2,
              "ix": 1
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [2.5, 152.656], "ix": 2 },
              "a": { "a": 0, "k": [2.5, 152.656], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [0]
                  },
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 40,
                    "s": [-3]
                  },
                  { "t": 80, "s": [0] }
                ],
                "ix": 4
              },
              "sa": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": [0.667], "y": [1] },
                    "o": { "x": [0.333], "y": [0] },
                    "t": 0,
                    "s": [0]
                  },
                  { "t": 80, "s": [360] }
                ],
                "ix": 5
              },
              "nm": "Transform"
            }
          ],
          "nm": "Group 1",
          "cix": 2,
          "ix": 1
        }
      ],
      "ip": 0,
      "op": 120,
      "st": 0,
      "ct": 1
    }
  ],
  "markers": []
}
